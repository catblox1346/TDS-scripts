local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local ReplicatedStore = game:GetService("ReplicatedStorage")

local SETTINGS_FILE = "settings.txt"
local DEFAULTS = {
    Map = "Crossroads",
    Difficulty = 1, -- dont change
    Mode = "Survival", -- dont change
}

if not pcall(readfile, SETTINGS_FILE) then
    writefile(SETTINGS_FILE, HttpService:JSONEncode(DEFAULTS))
end

local settings = HttpService:JSONDecode(readfile(SETTINGS_FILE))
local placeId = tostring(game.PlaceId)
local LOBBY_ID = "3260590327"

if not game:IsLoaded() then
    game.Loaded:Wait()
end

if placeId ~= LOBBY_ID then
    local player = Players.LocalPlayer
    if player then
        repeat task.wait()
        until player.PlayerGui:FindFirstChild("ReactGameIntermission", true)
    end
else
    task.wait(3)
end

local queueTeleport = (syn and syn.queue_on_teleport) or queue_on_teleport or (fluxus and fluxus.queue_on_teleport)

local remoteEvent = ReplicatedStore:WaitForChild("RemoteEvent")
local remoteFunction = ReplicatedStore:WaitForChild("RemoteFunction")

if placeId == LOBBY_ID then
    remoteFunction:InvokeServer(unpack({[1] = "Multiplayer", [2] = "v2:start", [3] = {count = 1, mode = settings.Mode, difficulty = settings.Difficulty}}))
else
    local boards = workspace:WaitForChild("IntermissionLobby"):WaitForChild("Boards")

    local function voteForMap()
        for _, board in ipairs(boards:GetChildren()) do
            local hitbox = board:FindFirstChild("Hitboxes")
            local title = hitbox
                and hitbox.Bottom
                and hitbox.Bottom:FindFirstChild("MapDisplay")
                and hitbox.Bottom.MapDisplay:FindFirstChild("Title")
            if title and title.Text == settings.Map then
                local cf = hitbox.VotePlatform.CFrame
                remoteEvent:FireServer("LobbyVoting", "Vote", settings.Map, Vector3.new(cf.X, cf.Y, cf.Z))
                return true
            end
        end
        return false
    end

    local function vetoMap()
        remoteEvent:FireServer("LobbyVoting", "Veto")
    end

    local function startMatch()
        remoteFunction:InvokeServer(unpack({[1] = "Multiplayer", [2] = "v2:start", [3] = {count = 1, mode = settings.Mode, difficulty = settings.Difficulty}}))
    end

    if not voteForMap() then
        vetoMap()
        if not voteForMap() then
            Players.LocalPlayer.OnTeleport:Connect(function()
                queueTeleport("loadstring(game:HttpGet('https://raw.githubusercontent.com/catblox1346/TDS-scripts/main/AutoMapSearch'))()")
            end)
            task.wait(0.5)
            startMatch()
        end
    end
end

